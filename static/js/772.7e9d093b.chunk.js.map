{"version":3,"file":"static/js/772.7e9d093b.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\"/>\n      <div className=\"app__banner-text\">\n        New comics every week!<br/>\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\"/>\n    </div>\n  )\n}\n\nexport default AppBanner;","import errorImg from './error.gif';\r\nimport './errorMessage.scss';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img alt=\"Error\" className=\"error\" src={errorImg}/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n  const {id} = useParams();\r\n  const [data, setData] = useState(null);\r\n\r\n  const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData();\r\n    // eslint-disable-next-line\r\n  }, [id])\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n    switch (dataType) {\r\n      case 'comic':\r\n        getComic(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess('confirmed'));\r\n        break;\r\n      case 'char':\r\n        getCharacter(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess('confirmed'));\r\n        break;\r\n      default: return null;\r\n    }\r\n    \r\n  }\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppBanner/>\r\n      {setContent(process, Component, data)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SinglePage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=58e190069e259b22eb353e694ed5e173';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharaters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      name: comics.title,\r\n      description: comics.description,\r\n      pageCount: comics.pageCount,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price !== 0 ? comics.prices[0].price + '$' : 'NOT AVAILABLE',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension\r\n    }\r\n  }\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    clearError, \r\n    getAllCharaters, \r\n    getCharacter, \r\n    getCharacterByName, \r\n    getAllComics, \r\n    getComic\r\n  };\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setProcess('loading');\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return(data);\r\n\r\n    } catch(e) {\r\n      setProcess('error');\r\n      throw e;\r\n    }\r\n\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return {request, clearError, process, setProcess};\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n  return (\r\n    <>\r\n      <p className=\"char__select\">Please select a character to see information</p>\r\n      <div className=\"skeleton\">\r\n        <div className=\"pulse skeleton__header\">\r\n          <div className=\"pulse skeleton__circle\"></div>\r\n          <div className=\"pulse skeleton__mini\"></div>\r\n        </div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton/>;\r\n    case 'loading': \r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component data={data}/>;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;"],"names":["className","src","avengers","alt","avengersLogo","errorImg","Component","dataType","id","useParams","useState","data","setData","useMarvelService","getComic","getCharacter","clearError","process","setProcess","useEffect","updateData","then","onDataLoaded","setContent","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","useHttp","_apiBase","_apiKey","getAllCharaters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getAllComics","_transformComics","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","Spinner","ErrorMessage"],"sourceRoot":""}