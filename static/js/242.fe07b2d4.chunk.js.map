{"version":3,"file":"static/js/242.fe07b2d4.chunk.js","mappings":"6KAGMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GACI,OADJA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACJC,MAAQ,CACNC,OAAO,GADD,EAcP,OAdO,yCAIR,WACEC,KAAKC,SAAS,CACZF,OAAO,MAEV,oBAED,WACE,OAAIC,KAAKF,MAAMC,OAAc,SAAC,IAAD,IAEtBC,KAAKE,MAAMC,aACnB,EAfGN,CAAsBO,EAAAA,WAkB5B,O,sHCZA,EANqB,WACnB,OACE,gBAAKC,IAAI,QAAQC,UAAU,QAAQC,IAAKC,M,sOC6DtCC,EAAO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACNC,EAAgDD,EAAhDC,KAAMC,EAA0CF,EAA1CE,YAAaC,EAA6BH,EAA7BG,UAAWC,EAAkBJ,EAAlBI,SAAUC,EAAQL,EAARK,KAC3CC,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdH,IACFG,EAAW,CAAC,UAAc,WAI1B,SAACC,EAAA,EAAD,CAAiBC,UAAW,KAA5B,UACE,SAACC,EAAA,EAAD,CAAeC,QAAQ,EAAMC,QAAS,IAAKC,WAAW,oBAAtD,UACE,iBAAKhB,UAAU,oBAAf,WACE,gBAAKC,IAAKM,EAAWR,IAAKM,EAAML,UAAU,kBAAkBiB,MAAOP,KACnE,iBAAKV,UAAU,mBAAf,WACE,cAAGA,UAAU,mBAAb,SAAiCK,KACjC,cAAGL,UAAU,oBAAb,SAAkCM,KAClC,iBAAKN,UAAU,mBAAf,WACE,cAAGkB,KAAMV,EAAUR,UAAU,sBAA7B,UACE,gBAAKA,UAAU,QAAf,yBAEF,cAAGkB,KAAMT,EAAMT,UAAU,2BAAzB,UACE,gBAAKA,UAAU,QAAf,kCAUhB,EAvFmB,WAEjB,OAAwBmB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEA,GAAwDC,EAAAA,EAAAA,KAAjDC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,YAE1CC,EAAAA,EAAAA,YAAU,WACRC,IACA,IAAMC,EAAUC,YAAYF,EAAY,KAExC,OAAO,kBAAMG,cAAcF,MAE1B,IAEH,IAAMD,EAAa,WACjBJ,IACA,IAAMQ,EAAKC,KAAKC,MAAM,IAAAD,KAAKE,SAAiC,QAC5DZ,EAAaS,GACVI,KAAKC,GACLD,MAAK,kBAAMV,EAAW,iBAGrBW,EAAe,SAACjB,GACpB,IAAKd,EAA6Bc,EAA7Bd,YAAgBgC,GAArB,OAAkClB,EAAlC,GACAd,EAC8B,IAA5Bc,EAAKd,YAAYiC,OAAe,0BAChCnB,EAAKd,YAAYiC,OAAS,IAAMnB,EAAKd,YAAYkC,MAAM,EAAG,KAAKC,OAAS,MAAQrB,EAAKd,YAEvFgC,EAAUhC,YAAcA,EAExBe,EAAQiB,IAOV,OACE,iBAAKtC,UAAU,aAAf,WACG0C,EAAAA,EAAAA,GAAWjB,EAAStB,EAAMiB,IAC3B,iBAAKpB,UAAU,qBAAf,WACE,eAAGA,UAAU,oBAAb,yCAC6B,kBAD7B,6CAIA,cAAGA,UAAU,oBAAb,oCAGA,mBAAQ2C,QAfE,WACdf,KAc8B5B,UAAU,sBAApC,UACE,gBAAKA,UAAU,QAAf,uBAEF,gBAAKC,IAAK2C,EAAS7C,IAAI,UAAUC,UAAU,kC,8BCmEnD,EAtGiB,SAACJ,GAEhB,OAA0BuB,EAAAA,EAAAA,UAAS,IAAnC,eAAO0B,EAAP,KAAcC,EAAd,KACA,GAA4C3B,EAAAA,EAAAA,WAAS,GAArD,eAAO4B,EAAP,KAAuBC,EAAvB,KACA,GAA4B7B,EAAAA,EAAAA,UAAS,KAArC,eAAO8B,EAAP,KAAeC,EAAf,KACA,GAAoC/B,EAAAA,EAAAA,WAAS,GAA7C,eAAOgC,EAAP,KAAmBC,EAAnB,KAEA,GAA+C9B,EAAAA,EAAAA,KAAxC+B,EAAP,EAAOA,gBAAiB5B,EAAxB,EAAwBA,QAASC,EAAjC,EAAiCA,YAEjCC,EAAAA,EAAAA,YAAU,WACR2B,EAAUL,GAAQ,KAEjB,IAEH,IAAMK,EAAY,SAACL,EAAQM,GACfP,GAAVO,GACAF,EAAgBJ,GACbb,KAAKoB,GACLpB,MAAK,kBAAMV,EAAW,iBAGrB8B,EAAgB,SAACC,GACrB,IAAIC,GAAQ,EACRD,EAASlB,OAAS,IAAGmB,GAAQ,GAEjCZ,GAAS,SAAAD,GAAK,wBAAQA,IAAR,OAAkBY,OAChCT,EAAkBD,IAAkB,GACpCG,GAAU,SAAAD,GAAM,OAAIA,EAAS,KAC7BG,GAAc,SAAAD,GAAU,OAAIO,MAGxBC,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAc,SAACC,GACnBH,EAASI,QAAQC,SAAQ,SAAAC,GACvBA,EAAKC,UAAUC,OAAO,0BAExBR,EAASI,QAAQD,GAAGI,UAAUE,IAAI,uBAClCT,EAASI,QAAQD,GAAGO,SAyCtB,IAAMC,GAAWC,EAAAA,EAAAA,UAAQ,WACvB,OA/Fe,SAAC9C,EAAS3B,EAAWiD,GACtC,OAAQtB,GACN,IAAK,UACH,OAAO,SAAC+C,EAAA,EAAD,IACT,IAAK,UACH,OAAOzB,GAAiB,SAACjD,EAAD,KAAe,SAAC0E,EAAA,EAAD,IACzC,IAAK,YACH,OAAO,SAAC1E,EAAD,IACT,IAAK,QACH,OAAO,SAAC2E,EAAA,EAAD,IACT,QACE,MAAM,IAAIC,MAAM,6BAoFXhC,CAAWjB,GAAS,kBAvC7B,SAAkBoB,GAChB,IAAM8B,EAAQ9B,EAAM+B,KAAI,SAACX,EAAMH,GAC7B,IAAIpD,EAAW,CAAC,UAAc,SAI9B,MAHuB,wEAAnBuD,EAAK1D,YACPG,EAAW,CAAC,UAAc,WAG1B,SAACG,EAAA,EAAD,CAA6BE,QAAS,IAAKC,WAAW,aAAtD,UACI,gBACE6D,SAAU,EACVC,IAAK,SAACC,GAAD,OAAOpB,EAASI,QAAQD,GAAKiB,GAClC/E,UAAU,aACV2C,QAAS,WACP/C,EAAMoF,eAAef,EAAKjC,IAC1B6B,EAAYC,IAEdmB,UAAW,SAACF,GACI,MAAVA,EAAEG,KAAyB,UAAVH,EAAEG,MACrBtF,EAAMoF,eAAef,EAAKjC,IAC1B6B,EAAYC,KAXlB,WAcI,gBAAK7D,IAAKgE,EAAK1D,UAAWR,IAAKkE,EAAK5D,KAAMY,MAAOP,KACjD,gBAAKV,UAAU,aAAf,SAA6BiE,EAAK5D,WAhBtB4D,EAAKjC,OAsB7B,OACE,eAAIhC,UAAU,aAAd,UACE,SAACW,EAAA,EAAD,CAAiBC,UAAW,KAA5B,SACG+D,MAO0BQ,CAAStC,KAAQE,KAEjD,CAACtB,IAEJ,OACE,iBAAKzB,UAAU,aAAf,UACGsE,GACD,mBACEtE,UAAU,mCACVoF,SAAUrC,EACV9B,MAAO,CAAC,QAAWkC,EAAa,OAAS,SACzCR,QAAS,kBAAMW,EAAUL,IAJ3B,UAKE,gBAAKjD,UAAU,QAAf,6B,UC1DR,MAtDA,YAA2B,IAARI,EAAO,EAAPA,KACVC,EAAwDD,EAAxDC,KAAMC,EAAkDF,EAAlDE,YAAaC,EAAqCH,EAArCG,UAAWC,EAA0BJ,EAA1BI,SAAUC,EAAgBL,EAAhBK,KAAM4E,EAAUjF,EAAViF,OACjD3E,EAAW,CAAC,UAAc,SAqB9B,OApBIH,EAAU+E,SAAS,6BACrB5E,EAAW,CAAC,UAAc,WAoB1B,SAACC,EAAA,EAAD,CAAiBC,UAAW,KAA5B,UACE,SAACC,EAAA,EAAD,CAAeC,QAAQ,EAAMC,QAAS,IAAKC,WAAW,OAAtD,UACE,iBAAKhB,UAAU,OAAf,WACE,iBAAKA,UAAU,eAAf,WACE,gBAAKC,IAAKM,EAAWR,IAAKM,EAAMY,MAAOP,KACvC,4BACE,gBAAKV,UAAU,kBAAf,SAAkCK,KAClC,iBAAKL,UAAU,aAAf,WACE,cAAGkB,KAAMV,EAAUR,UAAU,sBAA7B,UACE,gBAAKA,UAAU,QAAf,yBAEF,cAAGkB,KAAMT,EAAMT,UAAU,2BAAzB,UACE,gBAAKA,UAAU,QAAf,8BAKR,gBAAKA,UAAU,cAAf,SACGM,KAEH,gBAAKN,UAAU,eAAf,sBACA,eAAIA,UAAU,oBAAd,SArCFqF,EAAO9C,OAAS,EAAU,yCAG1B8C,EAAO7C,MAAM,EAAG,IAAIoC,KAAI,SAACX,EAAMH,GAC7B,OAAO,SAAC,KAAD,CACPyB,GAAE,iBAAYtB,EAAKuB,YAAYC,QAAQ,8CAA+C,KAEtFzF,UAAU,oBAHH,SAIJiE,EAAK5D,MAFHyD,gBC4Bf,EArCiB,SAAClE,GAChB,OAAwBuB,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEA,GAAwDC,EAAAA,EAAAA,KAAjDC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,YAE1CC,EAAAA,EAAAA,YAAU,WACRC,MAEC,CAAChC,EAAM8F,SAEV,IAAM9D,EAAa,WACjB,IAAO8D,EAAU9F,EAAV8F,OACFA,IAELlE,IACAD,EAAamE,GACVtD,KAAKC,GACLD,MAAK,kBAAMV,EAAW,kBAGrBW,EAAe,SAACjB,GACpBC,EAAQD,IAGV,OACE,gBAAKpB,UAAU,aAAf,UACE,SAAC,EAAA2F,SAAD,CAAUC,UAAU,SAACpB,EAAA,EAAD,IAApB,UACG9B,EAAAA,EAAAA,GAAWjB,EAASoE,EAAUzE,Q,mBC1BjCsB,EAAa,SAACjB,EAASrB,GAC3B,OAAQqB,GACN,IAAK,UACH,OAAO,KACT,IAAK,UACH,OAAO,SAAC+C,EAAA,EAAD,IACT,IAAK,YACH,OACGpE,EAAcA,EAAKmC,OAAS,GAC7B,iBAAKvC,UAAU,uBAAf,WACE,iBAAKA,UAAU,uBAAf,6BAAuDI,EAAK,GAAGC,KAA/D,aACA,SAAC,KAAD,CAAMkF,GAAE,sBAAiBnF,EAAK,GAAG4B,IAAMhC,UAAU,2BAAjD,UACE,gBAAKA,UAAU,QAAf,2BAGJ,gBAAKA,UAAU,qBAAf,gEAPQ,KAWZ,IAAK,QACH,OAAO,gBAAKA,UAAU,8BAAf,UAA6C,SAACyE,EAAA,EAAD,MACtD,QACE,MAAM,IAAIC,MAAM,8BAmDtB,EA/CuB,WAErB,OAAwBvD,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEA,GAA8DC,EAAAA,EAAAA,KAAvDwE,EAAP,EAAOA,mBAAoBtE,EAA3B,EAA2BA,WAAYC,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,WAE1CW,EAAe,SAACjB,GACpBC,EAAQD,IAWV,OACE,iBAAKpB,UAAU,oBAAf,WACE,SAAC,KAAD,CACE+F,cAAe,CACbC,SAAU,IAEZC,iBAAmBC,EAAAA,GAAW,CAC5BF,SAAUE,EAAAA,KAAaC,SAAS,4BAElCC,SAAU,YAAiB,IAjBb/F,EAiBF2F,EAAc,EAAdA,SAjBE3F,EAkBD2F,EAjBjBxE,IAEAsE,EAAmBzF,GAChB+B,KAAKC,GACLD,MAAK,kBAAMV,EAAW,iBAKvB,UAWE,UAAC,KAAD,YACE,kBAAO1B,UAAU,qBAAqBqG,QAAQ,WAA9C,2CACA,iBAAKrG,UAAU,uBAAf,WACE,SAAC,KAAD,CAAOgC,GAAG,WAAW3B,KAAK,WAAWiG,KAAK,OAAOC,YAAY,gBAC7D,mBAAQD,KAAK,SAAStG,UAAU,sBAAsBoF,SAAsB,YAAZ3D,EAAhE,UACE,gBAAKzB,UAAU,QAAf,wBAGJ,SAAC,KAAD,CAAoBK,KAAK,WAAWL,UAAU,qBAAqBY,UAAU,aAGhF8B,EAAWjB,EAASL,O,+DC7B3B,EAxCiB,WAEf,OAAgCD,EAAAA,EAAAA,UAAS,MAAzC,eAAOqF,EAAP,KAAqBnF,EAArB,KAMA,OACE,iCACE,UAACoF,EAAA,EAAD,YACE,iBACEpG,KAAK,cACLqG,QAAQ,+BAEV,6DAEF,SAACnH,EAAA,EAAD,WACE,SAAC,EAAD,OAGF,iBAAKS,UAAU,gBAAf,WACE,SAACT,EAAA,EAAD,WACE,SAAC,EAAD,CAAUyF,eAnBK,SAAChD,GACtBX,EAAQW,SAoBJ,4BACE,SAACzC,EAAA,EAAD,WACE,SAAC,EAAD,CAAUmG,OAAQc,OAEpB,SAACjH,EAAA,EAAD,WACE,SAAC,EAAD,aAKN,gBAAKS,UAAU,gBAAgBC,IAAK0G,EAAY5G,IAAI,gB,yGC0B1D,EArEyB,WAEvB,MCDqB,WACrB,OAA8BoB,EAAAA,EAAAA,UAAS,WAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KAEMkF,GAAUC,EAAAA,EAAAA,aAAW,mCAAC,WAAOC,GAAP,kGAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,CAAC,eAAgB,oBAE9FvF,EAAW,WAFe,kBAKDwF,MAAMJ,EAAK,CAACC,OAAAA,EAAQC,KAAAA,EAAMC,QAAAA,IALzB,WAKlBE,EALkB,QAOVC,GAPU,uBAQhB,IAAI1C,MAAJ,0BAA6BoC,EAA7B,qBAA6CK,EAASE,SARtC,yBAWLF,EAASG,OAXJ,eAWlBlH,EAXkB,yBAajBA,GAbiB,wCAgBxBsB,EAAW,SAhBa,+DAAD,sDAoBxB,IAMH,MAAO,CAACkF,QAAAA,EAASpF,YAJEqF,EAAAA,EAAAA,cAAY,WAC7BnF,EAAW,aACV,IAE0BD,QAAAA,EAASC,WAAAA,GD5Ba6F,GAA5CX,EAAP,EAAOA,QAASpF,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,QAASC,EAArC,EAAqCA,WAE/B8F,EAAW,4CACXC,EAAU,0CAGVpE,EAAe,mCAAG,yGAAOJ,EAAP,+BAFJ,IAEI,SACJ2D,EAAQ,GAAD,OAAIY,EAAJ,qCAAyCvE,EAAzC,YAAmDwE,IADtD,cAChBC,EADgB,yBAEfA,EAAItH,KAAKuH,QAAQ/C,IAAIgD,IAFN,2CAAH,qDAKfrG,EAAY,mCAAG,WAAOS,GAAP,uFACD4E,EAAQ,GAAD,OAAIY,EAAJ,sBAA0BxF,EAA1B,YAAgCyF,IADtC,cACbC,EADa,yBAEZE,EAAoBF,EAAItH,KAAKuH,QAAQ,KAFzB,2CAAH,sDAKZ7B,EAAkB,mCAAG,WAAOzF,GAAP,uFACPuG,EAAQ,GAAD,OAAIY,EAAJ,2BAA+BnH,EAA/B,YAAuCoH,IADvC,cACnBC,EADmB,yBAElBA,EAAItH,KAAKuH,QAAQ/C,IAAIgD,IAFH,2CAAH,sDAKlBC,EAAY,mCAAG,yGAAO5E,EAAP,+BAAgB,EAAhB,SACD2D,EAAQ,GAAD,OAAIY,EAAJ,iCAAqCvE,EAArC,YAA+CwE,IADrD,cACbC,EADa,yBAEZA,EAAItH,KAAKuH,QAAQ/C,IAAIkD,IAFT,2CAAH,qDAKZC,EAAQ,mCAAG,WAAO/F,GAAP,uFACG4E,EAAQ,GAAD,OAAIY,EAAJ,kBAAsBxF,EAAtB,YAA4ByF,IADtC,cACTC,EADS,yBAERI,EAAiBJ,EAAItH,KAAKuH,QAAQ,KAF1B,2CAAH,sDAKRC,EAAsB,SAACxG,GAC3B,MAAO,CACLY,GAAIZ,EAAKY,GACT3B,KAAMe,EAAKf,KACXC,YAAac,EAAKd,YAClBC,UAAWa,EAAKb,UAAUyH,KAAO,IAAM5G,EAAKb,UAAU0H,UACtDzH,SAAUY,EAAK8G,KAAK,GAAGpB,IACvBrG,KAAMW,EAAK8G,KAAK,GAAGpB,IACnBzB,OAAQjE,EAAKiE,OAAOV,QAIlBmD,EAAmB,SAACzC,GACxB,MAAO,CACLrD,GAAIqD,EAAOrD,GACX3B,KAAMgF,EAAO8C,MACb7H,YAAa+E,EAAO/E,YACpB8H,UAAW/C,EAAO+C,UAClBC,SAAUhD,EAAOiD,YAAYD,UAAY,QACzCE,MAAkC,IAA3BlD,EAAOmD,OAAO,GAAGD,MAAclD,EAAOmD,OAAO,GAAGD,MAAQ,IAAM,gBACrEhI,UAAW8E,EAAO9E,UAAUyH,KAAO,IAAM3C,EAAO9E,UAAU0H,YAI9D,MAAO,CACLxG,QAAAA,EACAC,WAAAA,EACAF,WAAAA,EACA6B,gBAAAA,EACA9B,aAAAA,EACAuE,mBAAAA,EACA+B,aAAAA,EACAE,SAAAA,K,kEEhDJ,EAjBiB,WACf,OACE,iCACE,cAAG/H,UAAU,eAAb,2DACA,iBAAKA,UAAU,WAAf,WACE,iBAAKA,UAAU,yBAAf,WACE,gBAAKA,UAAU,4BACf,gBAAKA,UAAU,6BAEjB,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,iC,oBCMvB,EAfmB,SAACyB,EAAS3B,EAAWM,GACtC,OAAQqB,GACN,IAAK,UACH,OAAO,SAAC,EAAD,IACT,IAAK,UACH,OAAO,SAAC+C,EAAA,EAAD,IACT,IAAK,YACH,OAAO,SAAC1E,EAAD,CAAWM,KAAMA,IAC1B,IAAK,QACH,OAAO,SAACqE,EAAA,EAAD,IACT,QACE,MAAM,IAAIC,MAAM","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/viewChar/ViewChar.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({\r\n      error: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) return <ErrorMessage/>\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import errorImg from './error.gif';\r\nimport './errorMessage.scss';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img alt=\"Error\" className=\"error\" src={errorImg}/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\n\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n  const [char, setChar] = useState([]);\r\n\r\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    const timerId = setInterval(updateChar, 30000);\r\n\r\n    return () => clearInterval(timerId);\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const updateChar = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  }\r\n\r\n  const onCharLoaded = (char) => {\r\n    let {description, ...charProps} = char;\r\n    description = (\r\n      char.description.length === 0 ? 'There is no description' :\r\n      char.description.length > 227 ? char.description.slice(0, 210).trim() + '...' : char.description\r\n      );\r\n    charProps.description = description;\r\n    \r\n    setChar(charProps);\r\n  }\r\n\r\n  const onTryIt = () => {\r\n    updateChar();\r\n  }\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {setContent(process, View, char)}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!<br/>\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">\r\n          Or choose another one\r\n        </p>\r\n        <button onClick={onTryIt} className=\"button button__main\">\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst View = ({data}) => {\r\n  const {name, description, thumbnail, homepage, wiki} = data;\r\n  let imgStyle = {'objectFit' : 'cover'};\r\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n    imgStyle = {'objectFit' : 'unset'};\r\n  }\r\n\r\n  return (\r\n    <TransitionGroup component={null}>\r\n      <CSSTransition appear={true} timeout={500} classNames=\"randomchar__block\">\r\n        <div className=\"randomchar__block\">\r\n          <img src={thumbnail} alt={name} className=\"randomchar__img\" style={imgStyle}/>\r\n          <div className=\"randomchar__info\">\r\n            <p className=\"randomchar__name\">{name}</p>\r\n            <p className=\"randomchar__descr\">{description}</p>\r\n            <div className=\"randomchar__btns\">\r\n              <a href={homepage} className=\"button button__main\">\r\n                <div className=\"inner\">homepage</div>\r\n              </a>\r\n              <a href={wiki} className=\"button button__secondary\">\r\n                <div className=\"inner\">Wiki</div>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CSSTransition>\r\n    </TransitionGroup>\r\n  )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Spinner/>;\r\n    case 'loading': \r\n      return newItemLoading ? <Component/> : <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component/>;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n  const [chars, setChars] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [charsEnded, setCharsEnded] = useState(false);\r\n\r\n  const {getAllCharaters, process, setProcess} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true)\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharaters(offset)\r\n      .then(onCharsLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  }\r\n\r\n  const onCharsLoaded = (newChars) => {\r\n    let ended = false;\r\n    if (newChars.length < 9) ended = true;\r\n\r\n    setChars(chars => [...chars, ...newChars]);\r\n    setNewItemLoading(newItemLoading >= true);\r\n    setOffset(offset => offset + 9);\r\n    setCharsEnded(charsEnded => ended);\r\n  }\r\n\r\n  const itemRefs = useRef([]);\r\n\r\n  const onItemFocus = (i) => {\r\n    itemRefs.current.forEach(item => {\r\n      item.classList.remove('char__item_selected');\r\n    })\r\n    itemRefs.current[i].classList.add('char__item_selected');\r\n    itemRefs.current[i].focus();\r\n  }\r\n\r\n  function viewChar(chars) {\r\n    const items = chars.map((item, i) => {\r\n      let imgStyle = {'objectFit' : 'cover'};\r\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'unset'};\r\n      }\r\n      return (\r\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n            <li\r\n              tabIndex={0}\r\n              ref={(e) => itemRefs.current[i] = e}\r\n              className=\"char__item\"\r\n              onClick={() => {\r\n                props.onCharSelected(item.id);\r\n                onItemFocus(i);\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.key === ' ' || e.key === 'Enter') {\r\n                  props.onCharSelected(item.id);\r\n                  onItemFocus(i);\r\n                }\r\n              }}>\r\n                <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                <div className=\"char__name\">{item.name}</div>\r\n            </li>\r\n        </CSSTransition>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <ul className=\"char__grid\">\r\n        <TransitionGroup component={null}>\r\n          {items}\r\n        </TransitionGroup>\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  const elements = useMemo(() => {\r\n    return setContent(process, () => viewChar(chars), newItemLoading);\r\n    // eslint-disable-next-line\r\n  }, [process])\r\n  \r\n  return (\r\n    <div className=\"char__list\">\r\n      {elements}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        disabled={newItemLoading}\r\n        style={{'display': charsEnded ? 'none' : 'block'}}\r\n        onClick={() => onRequest(offset)}>\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { Link } from 'react-router-dom';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport '../charInfo.scss';\r\n\r\nfunction ViewChar({data}) {\r\n  const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n  let imgStyle = {'objectFit' : 'cover'};\r\n  if (thumbnail.includes('image_not_available.jpg')) {\r\n    imgStyle = {'objectFit' : 'unset'};\r\n  }\r\n\r\n  const comicsList = () => {\r\n    if (comics.length < 1) return 'There is no comics for this character!'\r\n    else {\r\n      return (\r\n        comics.slice(0, 10).map((item, i) => {\r\n          return <Link\r\n          to={`comics/${item.resourceURI.replace('http://gateway.marvel.com/v1/public/comics/', '')}`}\r\n          key={i}\r\n          className=\"char__comics-item\">\r\n            {item.name}\r\n          </Link>;    \r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TransitionGroup component={null}>\r\n      <CSSTransition appear={true} timeout={500} classNames=\"char\">\r\n        <div className=\"char\">\r\n          <div className=\"char__basics\">\r\n            <img src={thumbnail} alt={name} style={imgStyle}/>\r\n            <div>\r\n              <div className=\"char__info-name\">{name}</div>\r\n              <div className=\"char__btns\">\r\n                <a href={homepage} className=\"button button__main\">\r\n                  <div className=\"inner\">homepage</div>\r\n                </a>\r\n                <a href={wiki} className=\"button button__secondary\">\r\n                  <div className=\"inner\">Wiki</div>\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"char__descr\">\r\n            {description}\r\n          </div>\r\n          <div className=\"char__comics\">Comics:</div>\r\n          <ul className=\"char__comics-list\">\r\n            {comicsList()}\r\n          </ul>\r\n        </div>\r\n      </CSSTransition>\r\n    </TransitionGroup>\r\n  )\r\n}\r\n\r\nexport default ViewChar;","import { useState, useEffect, Suspense } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport setContent from '../../utils/setContent';\r\nimport ViewChar from './viewChar/ViewChar';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    // eslint-disable-next-line\r\n  }, [props.charId])\r\n\r\n  const updateChar = () => {\r\n    const {charId} = props;\r\n    if (!charId) return;\r\n    \r\n    clearError();\r\n    getCharacter(charId)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  }\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  }\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      <Suspense fallback={<Spinner/>}>\r\n        {setContent(process, ViewChar, char)}\r\n      </Suspense>\r\n    </div>\r\n  )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst setContent = (process, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return null;\r\n    case 'loading': \r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return (\r\n        !data ? null : data.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n          <div className=\"char__search-success\">There is! Visit {data[0].name} page?</div>\r\n          <Link to={`/characters/${data[0].id}`} className=\"button button__secondary\">\r\n            <div className=\"inner\">To page</div>\r\n          </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n          The character not found. Check name and try again!\r\n        </div>\r\n      );\r\n    case 'error':\r\n      return <div className=\"char__search-critical-error\"><ErrorMessage/></div>;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nconst CharSearchForm = () => {\r\n\r\n  const [char, setChar] = useState(null);\r\n\r\n  const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  return (\r\n    <div className='char__search-form'>\r\n      <Formik \r\n        initialValues={{\r\n          charName: ''\r\n        }}\r\n        validationSchema= {Yup.object({\r\n          charName: Yup.string().required('This field is required')\r\n        })}\r\n        onSubmit={({charName}) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\"/>\r\n            <button type=\"submit\" className=\"button button__main\" disabled={process === 'loading'}>\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage name=\"charName\" className=\"char__search-error\" component=\"div\"/>\r\n        </Form>\r\n      </Formik>\r\n      {setContent(process, char)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm;","import {useState} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Marvel information portal\"\r\n        />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar/>\r\n      </ErrorBoundary>\r\n\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected}/>\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar}/>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm/>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=58e190069e259b22eb353e694ed5e173';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharaters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description,\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      name: comics.title,\r\n      description: comics.description,\r\n      pageCount: comics.pageCount,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price !== 0 ? comics.prices[0].price + '$' : 'NOT AVAILABLE',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension\r\n    }\r\n  }\r\n\r\n  return {\r\n    process,\r\n    setProcess,\r\n    clearError, \r\n    getAllCharaters, \r\n    getCharacter, \r\n    getCharacterByName, \r\n    getAllComics, \r\n    getComic\r\n  };\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setProcess('loading');\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return(data);\r\n\r\n    } catch(e) {\r\n      setProcess('error');\r\n      throw e;\r\n    }\r\n\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return {request, clearError, process, setProcess};\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n  return (\r\n    <>\r\n      <p className=\"char__select\">Please select a character to see information</p>\r\n      <div className=\"skeleton\">\r\n        <div className=\"pulse skeleton__header\">\r\n          <div className=\"pulse skeleton__circle\"></div>\r\n          <div className=\"pulse skeleton__mini\"></div>\r\n        </div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n        <div className=\"pulse skeleton__block\"></div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton/>;\r\n    case 'loading': \r\n      return <Spinner/>;\r\n    case 'confirmed':\r\n      return <Component data={data}/>;\r\n    case 'error':\r\n      return <ErrorMessage/>;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorBoundary","state","error","this","setState","props","children","Component","alt","className","src","errorImg","View","data","name","description","thumbnail","homepage","wiki","imgStyle","TransitionGroup","component","CSSTransition","appear","timeout","classNames","style","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","id","Math","floor","random","then","onCharLoaded","charProps","length","slice","trim","setContent","onClick","mjolnir","chars","setChars","newItemLoading","setNewItemLoading","offset","setOffset","charsEnded","setCharsEnded","getAllCharaters","onRequest","initial","onCharsLoaded","newChars","ended","itemRefs","useRef","onItemFocus","i","current","forEach","item","classList","remove","add","focus","elements","useMemo","Spinner","ErrorMessage","Error","items","map","tabIndex","ref","e","onCharSelected","onKeyDown","key","viewChar","disabled","comics","includes","to","resourceURI","replace","charId","Suspense","fallback","ViewChar","getCharacterByName","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","results","_transformCharacter","getAllComics","_transformComics","getComic","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}